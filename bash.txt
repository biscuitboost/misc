h1. Linux Tutorial for Java Developers

h2. 1. Why Linux and Bash

Linux and Bash are essential tools for developers:

* Flexibility:
** Linux provides a highly customizable environment
** Developers can tailor their workspace to their needs
** Bash scripts can automate repetitive tasks, saving time and reducing errors

* Power:
** Command-line interface offers efficient ways to manipulate and process data
** Often faster than GUI alternatives
** Once you can do something with the command line, you can automate it
** Automation with GUI elements like sliders is much more challenging

* Ubiquity in development:
** Linux is widely used in servers, cloud environments, and DevOps practices
** Familiarity with Linux is crucial for deploying and managing Java applications in production environments

h2. 2. Unix Architecture (simple understanding)

Basic components of Unix-like systems (including Linux):

* Kernel:
** Core of the operating system
** Manages hardware resources
** Schedules processes
** Provides essential services

* Shell:
** Interface between the user and the kernel
** Bash (Bourne Again Shell) is one of the most popular shells
** Many new shells exist, but BASH is good to understand due to its wide use

* File System:
** "Everything is a file" philosophy
** Organized in a hierarchical structure
** Root directory (/) at the top
*** Examples of "files":
*** Regular files
*** Directories
*** Device files (e.g., /dev/null)
*** Hardware serial devices
*** NFS file mounts

h2. 3. Useful Commands

h3. Basic Commands

* mv: Move or rename files and directories 
{code:bash}
mv old_file.txt new_file.txt 
mv file.txt /path/to/destination/ 
{code}

* cp: Copy files and directories 
{code:bash}
cp source.txt destination.txt 
cp -r source_dir/ destination_dir/ 
{code}

* ls: List directory contents 
{code:bash} 
ls 
ls -l  # Long format 
ls -a  # Show hidden files 
{code}

h4. Other commands 

{code:bash}
# List files and directories in the current directory 
ls 

# Change to the home directory 
cd ~ 

# Display the current directory path 
pwd 

# Copy file1.txt to directory /home/user/ 
cp file1.txt /home/user/ 

# Rename file1.txt to newname.txt 
mv file1.txt newname.txt 

# Remove file1.txt 
rm file1.txt 

# Create a new directory named myfolder 
mkdir myfolder 

# Remove the empty directory myfolder 
rmdir myfolder 

# Create a new empty file named myfile.txt 
touch myfile.txt 

# Display the contents of file1.txt 
cat file1.txt 

# View the contents of file1.txt interactively 
less file1.txt 

# View the contents of file1.txt interactively (less common) 
more file1.txt 

# Display the first 10 lines of file1.txt 
head file1.txt 

# Display the last 10 lines of file1.txt 
tail file1.txt 

# Print "Hello, World!" 
echo "Hello, World!" 

# View the manual page for the ls command 
man ls 

# Search for "pattern" in file1.txt 
grep "pattern" file1.txt 

# Find all files named "file1.txt" under the current directory 
find . -name "file1.txt" 

# Set read, write, and execute permissions for owner on file1.txt 
chmod u+rwx file1.txt 

# Change the owner of file1.txt to user2 chown user2 file1.
txt             {cod e }

connect remotehost ssh remotehost com copy local remotehost scp user@remotehost path destination list processes running system ps aux display real-time process information top terminate process PID kill {code}

h3. Intermediate Commands

* find: Search for files and directories {code:bash} find /path/to/search -name "*.java" # Find all Java files find . -type d -name "test" # Find directories named "test" {code}

* grep: Search for patterns in files {code:bash} grep public class *.java # Find public class in all Java files grep r TODO . # Recursively search TODO current directory {code}

h3. Advanced Commands

* awk: Text processing data extraction {code:bash} awk print $ print columns awk pattern print lines matching pattern {cod e }

sed Stream editor filtering transforming text sed s old new globally sed d delete first line {cod e }

4 Command Line Pipes allow send output command input another.

Example cat log txt grep ERROR wc count ERROR occurrences log fil e Redirection allows control input output streams Examples echo Hello World output Write overwrite echo New line append sort unsorted sorted Alias Create shortcuts frequently used commands.

Example alias ll ls alias update sudo update sudo upgrade saved bashrc bash_profile alias available next time logon.

5 Bash Programming Basics Loops Conditions Loops For Loop bash echo Number Iterate files bash echo Processing Add processing logic While Loop count while count le echo Count Conditionals If Statemen t if config properties then Config exists else Config found fi Case Statement Enter fruit name read fruit case apple It's apple banana plantain banana plantain Unknown fruit esac Shell Brace Expansion Brace Expansion Brace expansion allows generate arbitrary strings.

create multiple text patterns single pattern containing braces {} Examples Simple Expansion bash ech o Output Range Expansion Combining Text Nested Expansion Good Practices Quote variables Always quote variables prevent word splitting globbing bash filenam My Document copy filenam path destina tion Avoid mr Comments Add comments explain logic Check Java installed print version else Java installed fi Use functions reusable code Group related commands functions better organisation reusability.

function backup_file local cp bak created meaningful variable names Choose descriptive names variables improve readability.
