h1. Linux Tutorial for Java Developers

h2. 1. Why Linux and Bash

Linux and Bash are essential tools for developers:

* Flexibility:
** Linux provides a highly customizable environment
** Developers can tailor their workspace to their needs
** Bash scripts can automate repetitive tasks, saving time and reducing errors

* Power:
** Command-line interface offers efficient ways to manipulate and process data
** Often faster than GUI alternatives
** Once you can do something with the command line, you can automate it
** Automation with GUI elements like sliders is much more challenging

* Ubiquity in development:
** Linux is widely used in servers, cloud environments, and DevOps practices
** Familiarity with Linux is crucial for deploying and managing Java applications in production environments

h2. 2. Unix Architecture (simple understanding)

Basic components of Unix-like systems (including Linux):

* Kernel:
** Core of the operating system
** Manages hardware resources
** Schedules processes
** Provides essential services

* Shell:
** Interface between the user and the kernel
** Bash (Bourne Again Shell) is one of the most popular shells
** Many new shells exist, but BASH is good to understand due to its wide use

* File System:
** "Everything is a file" philosophy
** Organized in a hierarchical structure
** Root directory (/) at the top
** Examples of "files":
*** Regular files
*** Directories
*** Device files (e.g., /dev/null)
*** Hardware serial devices
*** NFS file mounts

h2. 3. Useful Commands

h3. Basic Commands

* {{mv}}: Move or rename files and directories
{code:bash}
mv old_file.txt new_file.txt
mv file.txt /path/to/destination/
{code}

* {{cp}}: Copy files and directories
{code:bash}
cp source.txt destination.txt
cp -r source_dir/ destination_dir/
{code}

* {{ls}}: List directory contents
{code:bash}
ls
ls -l  # Long format
ls -a  # Show hidden files
{code}

h3. Other commands

{code:bash}
# List files and directories in the current directory
ls

# Change to the home directory
cd ~

# Display the current directory path
pwd

# Copy file1.txt to directory /home/user/
cp file1.txt /home/user/

# Rename file1.txt to newname.txt
mv file1.txt newname.txt

# Remove file1.txt
rm file1.txt

# Create a new directory named myfolder
mkdir myfolder

# Remove the empty directory myfolder
rmdir myfolder

# Create a new empty file named myfile.txt
touch myfile.txt

# Display the contents of file1.txt
cat file1.txt

# View the contents of file1.txt interactively
less file1.txt

# View the contents of file1.txt interactively (less common)
more file1.txt

# Display the first 10 lines of file1.txt
head file1.txt

# Display the last 10 lines of file1.txt
tail file1.txt

# Print "Hello, World!"
echo "Hello, World!"

# View the manual page for the ls command
man ls

# Search for "pattern" in file1.txt
grep "pattern" file1.txt

# Find all files named "file1.txt" under the current directory
find . -name "file1.txt"

# Set read, write, and execute permissions for owner on file1.txt
chmod u+rwx file1.txt

# Change the owner of file1.txt to user2
chown user2 file1.txt

# Connect to remotehost.com using SSH
ssh remotehost.com

# Copy file1.txt from local to remotehost.com
scp file1.txt user@remotehost.com:/path/to/destination/

# List all processes running on the system
ps aux

# Display real-time process information
top

# Terminate process with PID 12345
kill 12345
{code}

h3. Intermediate Commands

* {{find}}: Search for files and directories
{code:bash}
find /path/to/search -name "*.java"  # Find all Java files
find . -type d -name "test"  # Find directories named "test"
{code}

* {{grep}}: Search for patterns in files
{code:bash}
grep "public class" *.java  # Find "public class" in all Java files
grep -r "TODO" .  # Recursively search for "TODO" in current directory
{code}

h3. Advanced Commands

* {{awk}}: Text processing and data extraction
{code:bash}
awk '{print $1, $3}' file.txt  # Print 1st and 3rd columns
awk '/pattern/ {print $0}' file.txt  # Print lines matching pattern
{code}

* {{sed}}: Stream editor for filtering and transforming text
{code:bash}
sed 's/old/new/g' file.txt  # Replace "old" with "new" globally
sed '1d' file.txt  # Delete the first line
{code}

h2. 4. Command Line

h3. Pipes (|)

Pipes allow you to send the output of one command as input to another.

Example:
{code:bash}
cat log.txt | grep "ERROR" | wc -l  # Count ERROR occurrences in log file
{code}

h3. Redirection (>, >>, <)

Redirection allows you to control input and output streams.

Examples:
{code:bash}
echo "Hello, World!" > output.txt  # Write to file (overwrite)
echo "New line" >> output.txt  # Append to file
sort < unsorted.txt > sorted.txt  # Sort file contents
{code}

h3. Alias

Create shortcuts for frequently used commands.

Example:
{code:bash}
alias ll='ls -alF'
alias update='sudo apt update && sudo apt upgrade -y'
{code}
These can be saved in {{~/.bashrc}} or {{~/.bash_profile}} so the alias is available next time you logon.

h2. 5. Bash Programming Basics (Loops and Conditions)

h3. Loops

h4. For Loop
{code:bash}
for i in {1..5}
do
   echo "Number: $i"
done

# Iterate over files
for file in *.java
do
   echo "Processing $file"
   # Add your processing logic here
done
{code}

h4. While Loop
{code:bash}
count=1
while [ $count -le 5 ]
do
   echo "Count: $count"
   ((count++))
done
{code}

h3. Conditionals

h4. If Statement
{code:bash}
if [ -f "config.properties" ]
then
    echo "Config file exists"
else
    echo "Config file not found"
fi
{code}

h4. Case Statement
{code:bash}
echo "Enter a fruit name:"
read fruit

case $fruit in
    "apple")
        echo "It's an apple"
        ;;
    "banana"|"plantain")
        echo "It's a banana or plantain"
        ;;
    *)
        echo "Unknown fruit"
        ;;
esac
{code}

h2. 6. Shell Brace Expansion

h3. Brace Expansion in Bash

Brace expansion in Bash allows you to generate arbitrary strings. It's used to create multiple text patterns from a single pattern containing braces {{{}}.

h4. Examples:

# *Simple Expansion:*
{code:bash}
echo {a,b,c}
# Output: a b c
{code}

# *Range Expansion:*
{code:bash}
echo {1..5}
# Output: 1 2 3 4 5
{code}

# *Combining Text:*
{code:bash}
echo file{1..3}.txt
# Output: file1.txt file2.txt file3.txt
{code}

# *Nested Expansion:*
{code:bash}
echo {a,b}{1,
